Algorithm of naive string matching
1. n ← length [T] 
2. m ← length [P] 
3. for s ← 0 to n -m 
4. do if P [1.....m] = T [s + 1....s + m] 
5. then print "Pattern occurs with shift" s 







Program of NAive string matching algorithm
#include <stdio.h> 
#include <string.h> 
int main (){ 
 char txt[] = "tutorialsPointisthebestplatformforprogrammers";  char pat[] = "a"; 
 int M = strlen (pat); 
 int N = strlen (txt); 
 for (int i = 0; i <= N - M; i++){ 
 int j; 
 for (j = 0; j < M; j++) 
 if (txt[i + j] != pat[j]) 
 break; 
 if (j == M) 
 printf ("Pattern matches at index %d 
", i); 
 } 
 return 0; 
} 
Output 
Pattern matches at 6 
Pattern matches at 25 
Pattern matches at 39 












Time Complexity of naive string matching algorithm
Best Case: O(n) 
● When the pattern is found at the very beginning of the text (or very early on). ● The algorithm will perform a constant number of comparisons, typically on the order of O(n) comparisons, where n is the length of the pattern. 
Worst Case: O(n^2) 
● When the pattern doesn’t appear in the text at all or appears only at the very end. ● The algorithm will perform O((n-m+1)*m) comparisons, where n is the length of the text and m is the length of the pattern. 
● In the worst case, for each position in the text, the algorithm may need to compare the entire pattern against the text. 
● Naive algorithm for Pattern Searching 
